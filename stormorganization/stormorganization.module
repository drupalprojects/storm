<?php
/**
 * @file
 */

function stormorganization_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#stormorganization":
      $output = '<p>'. t("Provides organization support for Storm") .'</p>';
      break;
  }

  return $output;
}

function stormorganization_permission() {
  return array(
    'Storm organization: access' => array(
      'title' => t('Access Storm Organization'),
    ),
    'Storm organization: add' => array(
      'title' => t('Add Storm Organization'),
    ),
    'Storm organization: delete all' => array(
      'title' => t('Delete Any Storm Organization'),
    ),
    'Storm organization: delete own' => array(
      'title' => t('Delete Authored Storm Organizations'),
    ),
    'Storm organization: edit all' => array(
      'title' => t('Edit Any Storm Organization'),
    ),
    'Storm organization: edit own' => array(
      'title' => t('Edit Authored Storm Organizations'),
    ),
    'Storm organization: edit belonged' => array(
      'title' => t('Edit Belonged Storm Organization'),
    ),
    'Storm organization: view all' => array(
      'title' => t('View Any Storm Organization'),
    ),
    'Storm organization: view own' => array(
      'title' => t('View Authored Storm Organizations'),
    ),
    'Storm organization: view belonged' => array(
      'title' => t('View Belonged Storm Organization'),
    ),
  );
}

function stormorganization_access($op, $node, $account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  if ($op == 'create') {
    return user_access('Storm organization: add');
  }

  if (is_numeric($node)) $node = node_load($node);

  if (!isset($account->stormorganization_nid) && module_exists('stormperson')) {
    _stormperson_user_load($account);
  }

  if ($op == 'delete') {
    if (user_access('Storm organization: delete all')) {
      return TRUE;
    }
    elseif (user_access('Storm organization: delete own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
  }

  if ($op == 'update') {
    if (user_access('Storm organization: edit all')) {
      return TRUE;
    }
    elseif (user_access('Storm organization: edit own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    elseif (user_access('Storm organization: edit belonged') && ($account->stormorganization_nid == $node->nid)) {
      return TRUE;
    }
  }

  if ($op == 'view') {
    if (user_access('Storm organization: view all')) {
      return TRUE;
    }
    elseif (user_access('Storm organization: view own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    elseif (user_access('Storm organization: view belonged') && ($account->stormorganization_nid == $node->nid)) {
      return TRUE;
    }
  }
  return FALSE;
}

function stormorganization_access_sql($sql, $where = array()) {
  if (user_access('Storm organization: view all')) {
    $where[] = "'storm_access'='storm_access'";
    return storm_rewrite_sql($sql, $where);
  }

  global $user;

  $cond = '';
  if (user_access('Storm organization: view own')) {
    $cond .= 'n.uid='. $user->uid;
  }
  if (user_access('Storm organization: view belonged')) {
    if (!empty($cond)) $cond .= ' OR ';
    $cond .= 'n.nid='. $user->stormorganization_nid;
  }
  if (empty($cond)) $cond = '0=1';
  $where[] = $cond;

  $where[] = "'storm_access'='storm_access'";
  return storm_rewrite_sql($sql, $where);
}

function stormorganization_storm_rewrite_where_sql($query, $primary_table, $account) {
  static $conds = array();

  if (isset($conds[$primary_table][$account->uid])) {
    return $conds[$primary_table][$account->uid];
  }

  if (preg_match("/'storm_access'='storm_access'/", $query)) {
    $cond = '';
  }
  else {
    if (user_access('Storm organization: view all', $account)) {
      return '';
    }

    $cond = '';
    if (user_access('Storm organization: view own', $account)) {
      $cond .= "${primary_table}.uid=". $account->uid;
    }
    if (user_access('Storm organization: view belonged', $account)) {
      if ($cond) {
        $cond .= ' OR ';
      }
      // If function is called without viewing an organization, this variable may not be set.
      // These lines check for that and set the organization node id to zero if not otherwise set.
      if (!isset($account->stormorganization_nid)) {
        $account->stormorganization_nid = 0;
      }
      $cond .= ' sor1.nid='. $account->stormorganization_nid;
    }
    if ($cond) {
      $cond = " WHEN 'stormorganization' THEN (SELECT IF($cond,1,0) FROM {stormorganization} sor1 WHERE sor1.vid=${primary_table}.vid) ";
    }
    else {
      $cond = " WHEN 'stormorganization' THEN 0 ";
    }
  }

  $conds[$primary_table][$account->uid] = $cond;
  return $cond;
}

function stormorganization_menu() {
  $items = array();

  $items['storm/organizations/autocomplete'] = array(
    'title' => 'Organization autocomplete',
    'page callback' => 'stormorganization_autocomplete',
    'access arguments' => array('Storm organization: access'),
    'type' => MENU_CALLBACK,
    'file' => 'stormorganization.admin.inc',
  );
  $items['admin/config/storm/organization'] = array(
    'title' => 'Storm organization',
    'description' => 'Storm organization administration page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stormorganization_admin_settings'),
    'access arguments' => array('Storm: access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function stormorganization_theme() {
  return array(
    'stormorganization_view' => array(
      'file'      => 'stormorganization.theme.inc',
      'variables' => array('node', 'view_mode'),
    ),
  );
}

function stormorganization_node_info() {
  return array(
    'stormorganization' => array(
      'name' => t('Organization'),
      'base' => 'stormorganization',
      'description' => t("An organization for Storm."),
      'title_label' => t("Name"),
      'body_label' => t("Note"),
    )
  );
}

function stormorganization_content_extra_fields($type_name) {
  if ($type_name == 'stormorganization') {
    return array(
      'group1' => array('label' => 'Customer/Provider/Active Group', 'weight' => -20),
      'group2' => array('label' => 'Prefix/Fullname Group', 'weight' => -19),
      'group3' => array('label' => 'Address Group', 'weight' => -18),
      'group4' => array('label' => 'Phone/WWW/Email Group', 'weight' => -17),
      'group5' => array('label' => 'Currency/Language/Tax ID Group', 'weight' => -16),
    );
  }
}

function stormorganization_form(&$node) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('Storm'), 'storm');
  $breadcrumb[] = l(t('Organizations'), 'storm/organizations');
  drupal_set_breadcrumb($breadcrumb);

  $type = node_type_get_type($node);

  $form['#attributes']['class'] = 'stormcomponent_node_form';

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'title') : -18,
  );

  $form['group1'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'group1') : -20,
  );

  $form['group1']['iscustomer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Customer'),
    '#default_value' => $node->iscustomer,
  );

  $form['group1']['isprovider'] = array(
    '#type' => 'checkbox',
    '#title' => t('Provider'),
    '#default_value' => $node->isprovider,
  );

  $form['group1']['isactive'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active'),
    '#default_value' => $node->isactive,
  );

  $form['group2'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'group2') : -19,
  );

  $form['group3'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'group3') : -18,
  );

  $form['group3']['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Address'),
    '#default_value' => isset($node->address) ? $node->address : NULL,
    '#weight' => 1,
  );

  $form['group3']['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#size' => 20,
    '#default_value' => isset($node->city) ? $node->city : NULL,
    '#weight' => 2,
  );

  $form['group3']['provstate'] = array(
    '#type' => 'textfield',
    '#title' => t('Province / State'),
    '#size' => 20,
    '#default_value' => isset($node->provstate) ? $node->provstate : NULL,
    '#weight' => 3,
  );

  $country_list = storm_attributes_bydomain('Country');
  $form['group3']['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => $country_list['values'],
    '#default_value' => $node->country,
    '#weight' => 4,
  );

  $form['group3']['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip'),
    '#size' => 15,
    '#default_value' => isset($node->zip) ? $node->zip : NULL,
    '#weight' => 5,
  );

  $form['group4'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'group4') : -17,
  );

  $form['group4']['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#default_value' => isset($node->phone) ? $node->phone : NULL,
  );

  $form['group4']['www'] = array(
    '#type' => 'textfield',
    '#title' => t('WWW'),
    '#size' => 30,
    '#default_value' => isset($node->www) ? $node->www : NULL,
  );

  $form['group4']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail'),
    '#size' => 30,
    '#default_value' => isset($node->email) ? $node->email : NULL,
  );

  $form['group5'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'group5') : -16,
  );

  $currency_list = storm_attributes_bydomain('Currency');
  $form['group5']['currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#options' => $currency_list['values'],
    '#default_value' => $node->currency,
  );

  $pricemode_list = storm_attributes_bydomain('Price mode');
  $form['group5']['pricemode'] = array(
    '#type' => 'select',
    '#title' => t('Price mode'),
    '#default_value' => $node->pricemode,
    '#options' => $pricemode_list['values'],
  );

  $form['group5']['price'] = array(
    '#title' => t('Price'),
    '#type' => 'textfield',
    '#size' => 15,
    '#default_value' => isset($node->price) ? $node->price : NULL,
  );

  $languages = language_list('language', TRUE);
  $languages_options = array();
  foreach ($languages as $language_code => $language) {
    $languages_options[$language_code] = $language->name;
  }
  $form['group5']['orglanguage'] = array(
    '#type' => 'select',
    '#title' => t('Language'),
    '#options' => $languages_options,
    '#default_value' => isset($node->orglanguage) ? $node->orglanguage : NULL,
  );

  $form['group5']['taxid'] = array(
    '#type' => 'textfield',
    '#title' => t('Tax ID'),
    '#size' => 20,
    '#default_value' => isset($node->taxid) ? $node->taxid : NULL,
  );

  //Check to see if the body field is still there, if so display it
  $body = field_get_items('stormorganization',$node,'body');
  if($body){
    $form['body_field'] = $body;
  }

  $form['title_old'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($node->title_old) ? $node->title_old : NULL,
  );

  return $form;
}

function stormorganization_insert($node) {
  db_insert('stormorganization')
    ->fields(array(
      'vid' => $node->vid,
      'nid' => $node->nid,
      'country' => $node->country,
      'www' => $node->www,
      'phone' => $node->phone,
      'email' => $node->email,
      'currency' => $node->currency,
      'provstate' => $node->provstate,
      'zip' => $node->zip,
      'city' => $node->city,
      'address' => $node->address,
      'taxid' => $node->taxid,
      'orglanguage' => $node->orglanguage,
      'iscustomer' => $node->iscustomer,
      'isprovider' => $node->isprovider,
      'isactive' => $node->isactive,
      'pricemode' => $node->pricemode,
//      'price' => $node->price,
    ))
    ->execute();
}

function stormorganization_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    stormorganization_insert($node);
  }
  else {
    db_update('stormorganization')
      ->fields(array(
        'country' => $node->country,
        'www' => $node->www,
        'phone' => $node->phone,
        'email' => $node->email,
        'currency' => $node->currency,
        'provstate' => $node->provstate,
        'zip' => $node->zip,
        'city' => $node->city,
        'address' => $node->address,
        'taxid' => $node->taxid,
        'orglanguage' => $node->orglanguage,
        'iscustomer' => $node->iscustomer,
        'isprovider' => $node->isprovider,
        'isactive' => $node->isactive,
        'pricemode' => $node->pricemode,
//        'price' => $node->price,
      ))
      ->condition('vid', $node->vid, '=')
      ->execute();

    if ($node->title != $node->title_old) {
      module_invoke_all('stormorganization_change', $node->nid, $node->title);
    }
  }
}

function stormorganization_node_prepare($node) {
  if (!isset($node->nid)) {
    $node->iscustomer = 1;
    $node->isprovider = 0;
    $node->isactive = 1;

    $country_list = storm_attributes_bydomain('Country');
    $node->country = $country_list['default'];

    $currency_list = storm_attributes_bydomain('Currency');
    $node->currency = $currency_list['default'];

    $pricemode_list = storm_attributes_bydomain('Price mode');
    $node->pricemode = $pricemode_list['default'];
  }
}

function stormorganization_node_revision_delete($node) {
  // Notice that we're matching a single revision based on the node's vid.
  db_delete('stormorganization')
    ->condition('vid', $node->vid)
    ->execute();
}

function stormorganization_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_delete('stormorganization')
    ->condition('nid', $node->nid)
    ->execute();
}

function stormorganization_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    $result = db_select('stormorganization', 'sor')
      ->fields('sor')
      ->condition('vid', $node->vid)
      ->execute();
    $record = array();
    $record = $result->fetchAssoc();
    if($record) {
      foreach ($record as $key => $value) {
        $node->$key = $value;
      }
    }

    $node->title_old = $node->title;
  }
}

function stormorganization_view($node, $view_mode) {
  if ($view_mode == 'full' && node_is_page($node)) {
    $breadcrumb = array();
    $breadcrumb[] = l(t('Storm'), 'storm');
    $breadcrumb[] = l(t('Organizations'), 'storm/organizations');
    drupal_set_breadcrumb($breadcrumb);
  }

  return theme('stormorganization_view', array('node' => $node, 'view_mode' => $view_mode));
}

function stormorganization_admin_settings() {
  $form = array();

  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('status', 1)
    ->condition('type', 'stormorganization')
    ->orderBy('title', 'ASC');

  $query->addTag('node_access');
//  $query->addTag('stormorganization_node_access'); // @TODO

  $result = $query->execute();

  $organizations = array();
  while ($organization = $result->fetchObject()) {
    $organizations[$organization->nid] = $organization->title;
  }

  if (count($organizations) > 0) {
    $form['storm_organization_nid'] = array(
      '#type' => 'select',
      '#title' => t('Host organization'),
      '#options' => $organizations,
      '#default_value' => variable_get('storm_organization_nid', 0),
      '#description' => t('The organization that owns this system'),
      '#weight' => -30,
    );
  }
  else {
    $form['storm_organization_nid'] = array(
      '#type' => 'item',
      '#title' => t('Host organization'),
      '#markup' => t('There are no Storm Organizations in the system.') .'<br />'. l(t('Create a Storm Organization'), 'node/add/stormorganization'),
    );
  }
  return system_settings_form($form);
}

function stormorganization_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'stormorganization'),
  );
}

function stormorganization_storm_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'theme' => 'storm_dashboard_link',
      'title' => t('Organizations'),
      'icon' => 'stormorganizations',
      'path' => 'storm/organizations',
      'params' => array(),
      'access_arguments' => 'Storm organization: access',
      'node_type' => 'stormorganization',
      'add_type' => 'stormorganization',
      'map' => array(),
      'weight' => 1,
    );
  }
  return $links;
}
