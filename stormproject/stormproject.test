<?php
/**
 * @file
 * Test definitions for the Storm Project module
 */
class StormprojectTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Storm Project Functionality'),
      'description' => t('Test the functionality of the Storm Project module'),
      'group' => 'Storm',
    );
  }

  public function setUp() {
    parent::setUp('views', 'storm', 'stormorganization', 'stormproject');
  }

  public function testStormprojectAccess() {
    $this->drupalGet('storm/projects');
    $this->assertResponse(403, t('Make sure access is denied to Storm Projects list for anonymous user'));

    $basic_user = $this->drupalCreateUser();
    $this->drupalLogin($basic_user);
    $this->drupalGet('storm/projects');
    $this->assertResponse(403, t('Make sure access is denied to Storm Projects list for basic user'));

    $privileged_user = $this->drupalCreateUser(array('Storm project: access'));
    $this->drupalLogin($privileged_user);
    $this->drupalGet('storm/projects');
    $this->assertText(t('Projects'), t('Make sure the correct page has been displayed by checking that the title is "Projects".'));
  }

  public function testStormprojectCreate() {
    // Create and login user
    $user = $this->drupalCreateUser(array('Storm organization: add', 'Storm organization: view all', 'Storm project: add', 'Storm project: view all'));
    $this->drupalLogin($user);

    // Create organization and invoice
    $org = array(
      'title' => $this->randomName(32),
      'body' => $this->randomName(64),
    );
    $prj = array(
      'title' => $this->randomName(32),
      'organization_nid' => '1',
    );
//    $this->drupalPost('node/add/stormorganization', $org, t('Save'));
//    $this->drupalPost('node/add/stormproject', $prj, t('Save'));

//    $this->assertText(t('Project @title has been created.', array('@title' => $prj['title'])));;
  }
}
